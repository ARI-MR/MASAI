<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TestPlan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Config Vars" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,raspberrypi)}</stringProp>
            <stringProp name="Argument.desc">IP or DNS name of the target</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CEP_PORT" elementType="Argument">
            <stringProp name="Argument.name">CEP_PORT</stringProp>
            <stringProp name="Argument.value">${__P(CEP_PORT,8080)}</stringProp>
            <stringProp name="Argument.desc">Port used by CEP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BROKER_PORT" elementType="Argument">
            <stringProp name="Argument.name">BROKER_PORT</stringProp>
            <stringProp name="Argument.value">${__P(BROKER_PORT,8081)}</stringProp>
            <stringProp name="Argument.desc">Port used by Broker</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MODEL1_DURATION" elementType="Argument">
            <stringProp name="Argument.name">MODEL1_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(MODEL1_DURATION,600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Overall duration of performance test for MODEL1</stringProp>
          </elementProp>
          <elementProp name="MODEL2_DURATION" elementType="Argument">
            <stringProp name="Argument.name">MODEL2_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(MODEL2_DURATION,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Overall duration of performance test for MODEL2</stringProp>
          </elementProp>
          <elementProp name="MODEL3_DURATION" elementType="Argument">
            <stringProp name="Argument.name">MODEL3_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(MODEL3_DURATION,300)}</stringProp>
            <stringProp name="Argument.desc">Overall duration of performance test for MODEL3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCENARIO1_RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">SCENARIO1_RAMPUP</stringProp>
            <stringProp name="Argument.value">${__P(SCENARIO1_RAMPUP,250)}</stringProp>
            <stringProp name="Argument.desc">Duration for connecting all devices for SCENARIO1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCENARIO2_RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">SCENARIO2_RAMPUP</stringProp>
            <stringProp name="Argument.value">${__P(SCENARIO2_RAMPUP,25)}</stringProp>
            <stringProp name="Argument.desc">Duration for connecting all devices for SCENARIO2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">can be overriden by -Jname arguments on command line</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target host" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type: application/json" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446649389000</longProp>
        <longProp name="ThreadGroup.end_time">1446649389000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CEP Configuration" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;host&quot;:&quot;http://localhost:8080&quot;,&#xd;
  &quot;in&quot;:[&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room.*&quot;,&#xd;
      &quot;isPattern&quot;:&quot;true&quot;,&#xd;
      &quot;type&quot;:&quot;Room&quot;,&#xd;
      &quot;providers&quot;:[&quot;http://localhost:8081&quot;],&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot;,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;floor&quot;,&#xd;
          &quot;type&quot;:&quot;string&quot;&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }   ]&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }   ]&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;photo&quot;,&#xd;
          &quot;type&quot;:&quot;string&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;out&quot;:[&#xd;
    {&#xd;
      &quot;id&quot;:&quot;floor1&quot;,&#xd;
      &quot;type&quot;:&quot;Floor&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }]&#xd;
    } ,&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertTemperature&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }]&#xd;
    } ,&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertHumidity&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; } ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertPressure&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }                                      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;statements&quot;:[&#xd;
    &quot;INSERT  INTO Floor SELECT floor as id, avg(temperature) as  temperature, temperature_unit, avg(pressure) as pressure, pressure_unit, avg(humidity) as humidity, humidity_unit FROM  Room.win:time(1 min) GROUP BY floor OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertTemperature SELECT id, temperature ,  temperature_unit,  time , location  from Room where temperature &gt; 30.0  or temperature &lt; 10 OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertHumidity SELECT id, humidity ,   humidity_unit ,  time , location from Room where humidity&gt; 70.0 or humidity &lt; 10.0 OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertPressure SELECT id, pressure ,    pressure_unit ,  time , location from  Room where pressure&gt; 1025.0 or pressure &lt; 1000 OUTPUT LAST EVERY 10  sec&quot;&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/admin/config</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="CEP Configuration" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename">CEP Configuration.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Post-Processeur BeanShell" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Static elements or calculations
//part = &quot;&lt;/testResults&gt;&quot;;

//target=${__property(user.dir)}  + &quot;\\CEP Configuration.jtl&quot;;
//target=props.get(&quot;user.dir&quot;);
target=ctx.getSamplerContext();
vars.put(&quot;target&quot;,target); 

log.info(target);
log.info(ctx.getSamplerContext());

// Open File(s)
//f = new FileOutputStream(target, true); 
//p = new PrintStream(f); 

// Write data to file 
//p.println(part);

// Close File(s)
//p.close();f.close();

return &quot;BeanShell executed&quot;;</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Echantillon Débogage" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP Only - Model1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL1_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_Only-Model1" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_Only-Model1.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP Only - Model2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL2_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-2034809152">Model2: 50% of error requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_Only-Model2" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_Only-Model2.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP Only - Model3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL3_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model3" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-800074137">Model3: 50% of big requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_Only-Model3" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_Only-Model3.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP with Broker - Model1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL1_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_with_Broker-Model1" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_with_Broker-Model1.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP with Broker - Model2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL2_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-2034809152">Model2: 50% of error requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_with_Broker-Model2" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_with_Broker-Model2.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - CEP with Broker - Model3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO1_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL3_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (Low)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">0.1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO1_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model3" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-800074137">Model3: 50% of big requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario1-CEP_with_Broker-Model3" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario1-CEP_with_Broker-Model3.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP Only - Model1" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL1_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_Only-Model1" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_Only-Model1.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP Only - Model2" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL2_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-2034809152">Model2: 50% of error requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_Only-Model2" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_Only-Model2.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP Only - Model3" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL3_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model3" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-800074137">Model3: 50% of big requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_Only-Model3" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_Only-Model3.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP with Broker - Model1" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL1_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_with_Broker-Model1" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_with_Broker-Model1.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP with Broker - Model2" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL2_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-2034809152">Model2: 50% of error requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_with_Broker-Model2" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_with_Broker-Model2.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - CEP with Broker - Model3" enabled="true">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${SCENARIO2_RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${MODEL3_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Throughput (High)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Throughput" elementType="Argument">
              <stringProp name="Argument.name">Throughput</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.desc">Req/mn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1 req/s per sensor/thread</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rampup duration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Rampup_duration" elementType="Argument">
              <stringProp name="Argument.name">Rampup_duration</stringProp>
              <stringProp name="Argument.value">${SCENARIO2_RAMPUP}</stringProp>
              <stringProp name="Argument.desc">In seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">4 sensors (threads) per seconds (20 in 5s)</stringProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model3" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-800074137">Model3: 50% of big requests</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Scenario2-CEP_with_Broker-Model3" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">Scenario2-CEP_with_Broker-Model3.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Floor" enabled="true">
        <stringProp name="maximumValue">49</stringProp>
        <stringProp name="minimumValue">0</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">FLOOR</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Room" enabled="true">
        <stringProp name="maximumValue">20</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">ROOM</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Temperature" enabled="true">
        <stringProp name="maximumValue">42</stringProp>
        <stringProp name="minimumValue">10</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">TEMPVALUE</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="varPressureValue" enabled="true">
        <stringProp name="maximumValue">1030</stringProp>
        <stringProp name="minimumValue">990</stringProp>
        <stringProp name="outputFormat">000</stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">varPressureValue</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="varHumidityValue" enabled="true">
        <stringProp name="maximumValue">100</stringProp>
        <stringProp name="minimumValue">10</stringProp>
        <stringProp name="outputFormat">00</stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">varHumidityValue</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Model1: Normal" enabled="true"/>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Compteur de débit constant" enabled="true">
          <stringProp name="throughput">${Throughput}</stringProp>
          <intProp name="calcMode">2</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;:&#xd;
         [&#xd;
             {&#xd;
                 &quot;type&quot;: &quot;Room&quot;,&#xd;
                 &quot;isPattern&quot;: &quot;false&quot;,&#xd;
                 &quot;id&quot;: &quot;room${FLOOR}${ROOM}&quot;,&#xd;
                 &quot;attributes&quot;: [&#xd;
                     {&#xd;
                         &quot;name&quot;: &quot;temperature&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                         &quot;value&quot;: &quot;${TEMPVALUE}&quot;,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                             { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; , &quot;value&quot;:&quot;celsius&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                          &quot;name&quot;: &quot;floor&quot;,&#xd;
                          &quot;type&quot;: &quot;string&quot;,&#xd;
                          &quot;value&quot;: &quot;floor${FLOOR}&quot;&#xd;
                      },&#xd;
                    {&#xd;
                         &quot;name&quot;: &quot;pressure&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                          &quot;value&quot;:  ${varPressureValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;bar&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                       {&#xd;
                         &quot;name&quot;: &quot;humidity&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                           &quot;value&quot;:   ${varHumidityValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                               { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,   &quot;value&quot;:&quot;percent&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                           &quot;name&quot;:&quot;time&quot;,&#xd;
                           &quot;type&quot;:&quot;date&quot;,&#xd;
                           &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;&#xd;
                      },&#xd;
                      {&#xd;
                      		&quot;name&quot;:&quot;location&quot;,&#xd;
                            &quot;type&quot;:&quot;geo:point&quot;,&#xd;
                            &quot;value&quot;:&quot;46.2323,1.023&quot;&#xd;
                      }&#xd;
                 ]&#xd;
              }&#xd;
            ],&#xd;
		&quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.contextElementResponses[0].statusCode.details</stringProp>
            <stringProp name="EXPECTED_VALUE">All is OK</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="false"/>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Error requests 1%" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>1.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD JSON" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Bad request</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD TYPE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;RoomSMLKD&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Missing parameter</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext EMPTY" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Bad request</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD PATH" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;Room&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;,&#xd;
            &quot;attributes&quot;: [&#xd;
            {&#xd;
                &quot;name&quot;: &quot;temperature&quot;,&#xd;
                &quot;type&quot;: &quot;float&quot;,&#xd;
                &quot;value&quot;: &quot;26.5&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;name&quot;: &quot;pressure&quot;,&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;value&quot;: &quot;763&quot;&#xd;
            }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">bad/path</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51513">405</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.path</stringProp>
                <stringProp name="EXPECTED_VALUE">/bad/path</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Echantillon Débogage" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Model2: 50% of error requests" enabled="true"/>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Compteur de débit constant" enabled="true">
          <stringProp name="throughput">${Throughput}</stringProp>
          <intProp name="calcMode">2</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;:&#xd;
         [&#xd;
             {&#xd;
                 &quot;type&quot;: &quot;Room&quot;,&#xd;
                 &quot;isPattern&quot;: &quot;false&quot;,&#xd;
                 &quot;id&quot;: &quot;room${FLOOR}${ROOM}&quot;,&#xd;
                 &quot;attributes&quot;: [&#xd;
                     {&#xd;
                         &quot;name&quot;: &quot;temperature&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                         &quot;value&quot;: &quot;${TEMPVALUE}&quot;,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                             { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; , &quot;value&quot;:&quot;celsius&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                          &quot;name&quot;: &quot;floor&quot;,&#xd;
                          &quot;type&quot;: &quot;string&quot;,&#xd;
                          &quot;value&quot;: &quot;floor${FLOOR}&quot;&#xd;
                      },&#xd;
                    {&#xd;
                         &quot;name&quot;: &quot;pressure&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                          &quot;value&quot;:  ${varPressureValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;bar&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                       {&#xd;
                         &quot;name&quot;: &quot;humidity&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                           &quot;value&quot;:   ${varHumidityValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                               { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,   &quot;value&quot;:&quot;percent&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                           &quot;name&quot;:&quot;time&quot;,&#xd;
                           &quot;type&quot;:&quot;date&quot;,&#xd;
                           &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;&#xd;
                      },&#xd;
                      {&#xd;
                      		&quot;name&quot;:&quot;location&quot;,&#xd;
                            &quot;type&quot;:&quot;geo:point&quot;,&#xd;
                            &quot;value&quot;:&quot;46.2323,1.023&quot;&#xd;
                      }&#xd;
                 ]&#xd;
              }&#xd;
            ],&#xd;
		&quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.contextElementResponses[0].statusCode.details</stringProp>
            <stringProp name="EXPECTED_VALUE">All is OK</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="false"/>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Error requests 50%" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD JSON" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Bad request</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD TYPE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;RoomSMLKD&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Missing parameter</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext EMPTY" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.errorCode.reasonPhrase</stringProp>
                <stringProp name="EXPECTED_VALUE">Bad request</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD PATH" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;Room&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;,&#xd;
            &quot;attributes&quot;: [&#xd;
            {&#xd;
                &quot;name&quot;: &quot;temperature&quot;,&#xd;
                &quot;type&quot;: &quot;float&quot;,&#xd;
                &quot;value&quot;: &quot;26.5&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;name&quot;: &quot;pressure&quot;,&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;value&quot;: &quot;763&quot;&#xd;
            }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">bad/path</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51513">405</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.path</stringProp>
                <stringProp name="EXPECTED_VALUE">/bad/path</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Echantillon Débogage" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Model3: 50% of big requests" enabled="true"/>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Compteur de débit constant" enabled="true">
          <stringProp name="throughput">${Throughput}</stringProp>
          <intProp name="calcMode">2</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;:&#xd;
         [&#xd;
             {&#xd;
                 &quot;type&quot;: &quot;Room&quot;,&#xd;
                 &quot;isPattern&quot;: &quot;false&quot;,&#xd;
                 &quot;id&quot;: &quot;room${FLOOR}${ROOM}&quot;,&#xd;
                 &quot;attributes&quot;: [&#xd;
                     {&#xd;
                         &quot;name&quot;: &quot;temperature&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                         &quot;value&quot;: &quot;${TEMPVALUE}&quot;,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                             { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; , &quot;value&quot;:&quot;celsius&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                          &quot;name&quot;: &quot;floor&quot;,&#xd;
                          &quot;type&quot;: &quot;string&quot;,&#xd;
                          &quot;value&quot;: &quot;floor${FLOOR}&quot;&#xd;
                      },&#xd;
                    {&#xd;
                         &quot;name&quot;: &quot;pressure&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                          &quot;value&quot;:  ${varPressureValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;bar&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                       {&#xd;
                         &quot;name&quot;: &quot;humidity&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                           &quot;value&quot;:   ${varHumidityValue}.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                               { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,   &quot;value&quot;:&quot;percent&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                           &quot;name&quot;:&quot;time&quot;,&#xd;
                           &quot;type&quot;:&quot;date&quot;,&#xd;
                           &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;&#xd;
                      },&#xd;
                      {&#xd;
                      		&quot;name&quot;:&quot;location&quot;,&#xd;
                            &quot;type&quot;:&quot;geo:point&quot;,&#xd;
                            &quot;value&quot;:&quot;46.2323,1.023&quot;&#xd;
                      }&#xd;
                 ]&#xd;
              }&#xd;
            ],&#xd;
		&quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.contextElementResponses[0].statusCode.details</stringProp>
            <stringProp name="EXPECTED_VALUE">All is OK</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="false"/>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Big requests 50%" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext (big request)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{                                               &#xd;
     &quot;contextElements&quot;: &#xd;
         [&#xd;
             {                                                                &#xd;
                 &quot;type&quot;: &quot;Room&quot;,                                                                &#xd;
                 &quot;isPattern&quot;: &quot;false&quot;,                                                                &#xd;
                 &quot;id&quot;: &quot;room${FLOOR}${ROOM}&quot;,                                                                &#xd;
                 &quot;attributes&quot;: [                                                                           &#xd;
                     {                                                                                &#xd;
                         &quot;name&quot;: &quot;temperature&quot;,                                                                                &#xd;
                         &quot;type&quot;: &quot;double&quot;,                                                                                &#xd;
                          &quot;value&quot;:  &quot;${TEMPVALUE}&quot;,                                                                                &#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;celsius&quot;},                                                                                        &#xd;
                              { &quot;name&quot;:&quot;time&quot;, &quot;type&quot;:&quot;date&quot;, &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;},                                                                                        &#xd;
                              { &quot;name&quot;:&quot;location&quot;, &quot;type&quot;:&quot;geo:point&quot;, &quot;value&quot;:&quot;46.2323,1.023&quot;}                                                                                &#xd;
                           ]                                                                        &#xd;
                      },                                                                           &#xd;
                      {                                                                                &#xd;
                          &quot;name&quot;: &quot;floor&quot;,                                                                                &#xd;
                          &quot;type&quot;: &quot;string&quot;,                                                                                &#xd;
                          &quot;value&quot;: &quot;floor${FLOOR}&quot;                                                                        &#xd;
                      },&#xd;
                    {                                                                                &#xd;
                         &quot;name&quot;: &quot;pressure&quot;,                                                                                &#xd;
                         &quot;type&quot;: &quot;double&quot;,                                                                                &#xd;
                         &quot;value&quot;:  ${varPressureValue}.0,                                                                         &#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;bar&quot;},&#xd;
                               { &quot;name&quot;:&quot;time&quot;, &quot;type&quot;:&quot;date&quot;, &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;},                                                                                        &#xd;
                               { &quot;name&quot;:&quot;location&quot;, &quot;type&quot;:&quot;geo:point&quot;, &quot;value&quot;:&quot;46.2323,1.023&quot;}                                                          &#xd;
                           ]                                                                        &#xd;
                      },  &#xd;
                       {                                                                                &#xd;
                         &quot;name&quot;: &quot;humidity&quot;,                                                                                &#xd;
                         &quot;type&quot;: &quot;double&quot;,                                                                                &#xd;
                         &quot;value&quot;:   ${varHumidityValue}.0,                                                                             &#xd;
                         &quot;metadatas&quot;: [&#xd;
                               { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,   &quot;value&quot;:&quot;percent&quot;},&#xd;
                                { &quot;name&quot;:&quot;time&quot;, &quot;type&quot;:&quot;date&quot;, &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;},                                                                                        &#xd;
                                { &quot;name&quot;:&quot;location&quot;, &quot;type&quot;:&quot;geo:point&quot;, &quot;value&quot;:&quot;46.2323,1.023&quot;  }                                                         &#xd;
                           ]                                                                        &#xd;
                      },&#xd;
                    {&#xd;
                        &quot;name&quot;:&quot;time&quot;, &#xd;
                        &quot;type&quot;:&quot;date&quot;, &#xd;
                        &quot;value&quot;:&quot;${__time(YYYY-MM-dd)}T${__time(HH:MM:ss)}Z&quot;&#xd;
                    },  &#xd;
                    { &#xd;
                        &quot;name&quot;:&quot;location&quot;, &#xd;
                        &quot;type&quot;:&quot;geo:point&quot;, &#xd;
                        &quot;value&quot;:&quot;46.2323,1.023&quot; &#xd;
                        },&#xd;
                      {&#xd;
                          &quot;name&quot;:&quot;photo&quot;,&#xd;
                          &quot;type&quot;:&quot;string&quot;,&#xd;
                          &quot;value&quot;: &quot;iVBORw0KGgoAAAANSUhEUgAAAEEAAABaCAIAAABohKxKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA3USURBVHhe7ZwvdKtIFMYjIyNrKysraysrI2MjIyNjIyMjsZFIZCwSicQikSPZ33dnhkCSdgntvn1vz3I4PDIMM/e7/+cOfbPz+VwURVmWeZ5zw09u/NW3/M5XyGvbdpZlGXee1qujD6AP6Te592QLQ5qm3DVNU9f1n3WFYPRFGE6nU1VV3P2JByYQMPi7P/G4YPgvyOF/DP+mDv5vD/8m9y9z/5dsOvmPxIdBjHN39GTQ5trbLvdeiuMMn+lXbGluprozzidDqznoUnpKrnyrf8euXLpfl6GMigspQ3z9X/Z6r2dvQD9uE3tf0xnZdI9dPdyfYrjize00X0qhg/211QvZFdz+C5GDw7bmOicKGJLkcBPjhiy3yZC655wf9VY9rtuGvbr+XjSX8cJwAdI90iOMKm+LU+sG6tf5pWN1lS8Bty7b6tyW57YiufUju9aPQmPt+eHaOm/LrC1SPfJHU7ZFZn1osflcraEKRlMfU8GyrQsaHY086jSWectUrzN74BiUFBqKMz+6ZK3xewyMcjiBYWjT6aHJjm2etuekTfciqKlFRLpTy/nQ8hTKmsqdNm2RuPNRj5isKR1P8wMtLjs48LumYW76n09tdhBgKMj2PG3yUwP4dGON4K3adEsfl6WOWQDT1m2WuNPWcS1zx1vHDwcxtxjSNIkYgsBdwmv7wNcyddmmbYoGgjwPmCzZQrFIBANM5YDHaskbgYHfjnv1hBSo1IttWyVtZlDTnaB6UuimQSrRndNY22iZeCdUB3daiV8cNUzchA5Rv27lEM3stDU2eA2qHWQ1ABBBDkEzWbLR3K5qz3txDh7DUTSHzrCc6enjtQvdSz642os7ya2uHB2i7gkH7K8yITGoamEuaAAtUIskEMwr2dbrZ+dmenE66FJ0lwwaMegdhoPZUpKjRFllQuVV1pVqAQCjlyd1hg61nBwsZ9YcbTRtoZEODNs0kobMIHBJ70o4whCIYxB+MgWSkfLYgdiFIRDpe3YYOl2KwyYrVFaTceRHU4CyPa3Nvhnr3B6XZnkMupcaMC4I021TVzVEt1gXLSg9/M4cE3ufWBXYgBQDlqsRLmBm2MmWhbDB1mjqXKDAEIA99DAAJqrlrRw6vxQfMcdpJ+oF4GByd3a/N609SVu4CoPZd2amX5eOWWXf9pQbOuAKIU4yTCQ9qRw2vRMMuQcsBCpNb4FEN95iNE44xbt5FhhnHWTW0uGLY+/51qq/FnUCIHeJ9FPXuTnmhj3l2cmxOpHLP1wRTplZN1NUnnpvGxXDySkXNmB004ChD9TIBZtsDYQk4BslN9OC7iYMXsSJ/CsuYkiTwXqaKWGPfIt/Lxy3sbnv42zC0N/3vNc/doHfcfy7PYcj9Ee6HjVgOJIvxfgQuphfDxMO42Iklae+r7rdkttr8SG562UWCXfN2KIfjKOO+ncAsJNDWpWmGL0heqP3WfzZJJ8z/Qt5XAbrphjTezDXD66BLkREdblFexdnkFJ8vxPaKInQ6bvr6ShUIrcZNGZ9MVCsqkc0hh5SziDg8Mx7mM7PMI6NMIT7hZB7GB6qzRhxfV2rSH5kP7gsn/kE7e9jsMBHH0xZ0a2+soTQldQL99VznZ9LNUzzHV0irbD8VOltagmPTNU7XMupgES+VIZUR5ELv070UA6nzCekpfhcc7KWJrmcSHL8yqXdqNg3MNRlraTo6PJUSR5xHQwQTTqNFyKMpEcLbXviGsmiI90qE0WMdN8cV8ZsArMCHLmWZbUkwoRRS4qDJ/xKhTosk+2h0axajlRK8pRlrDUxdBQHZYegUpQlYJGVrMJygm5KIsgsLKFQxCTBtlQcG0A4yikNwxjnFEFMiVBORw0KGgoAAAANSUhEUgAAAEEAAABaCAIAAABohKxKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA3USURBVHhe7ZwvdKtIFMYjIyNrKysraysrI2MjIyNjIyMjsZFIZCwSicQikSPZ33dnhkCSdgntvn1vz3I4PDIMM/e7/+cOfbPz+VwURVmWeZ5zw09u/NW3/M5XyGvbdpZlGXee1qujD6AP6Te592QLQ5qm3DVNU9f1n3WFYPRFGE6nU1VV3P2JByYQMPi7P/G4YPgvyOF/DP+mDv5vD/8m9y9z/5dsOvmPxIdBjHN39GTQ5trbLvdeiuMMn+lXbGluprozzidDqznoUnpKrnyrf8euXLpfl6GMigspQ3z9X/Z6r2dvQD9uE3tf0xnZdI9dPdyfYrjize00X0qhg/211QvZFdz+C5GDw7bmOicKGJLkcBPjhiy3yZC655wf9VY9rtuGvbr+XjSX8cJwAdI90iOMKm+LU+sG6tf5pWN1lS8Bty7b6tyW57YiufUju9aPQmPt+eHaOm/LrC1SPfJHU7ZFZn1osflcraEKRlMfU8GyrQsaHY086jSWectUrzN74BiUFBqKMz+6ZK3xewyMcjiBYWjT6aHJjm2etuekTfciqKlFRLpTy/nQ8hTKmsqdNm2RuPNRj5isKR1P8wMtLjs48LumYW76n09tdhBgKMj2PG3yUwP4dGON4K3adEsfl6WOWQDT1m2WuNPWcS1zx1vHDwcxtxjSNIkYgsBdwmv7wNcyddmmbYoGgjwPmCzZQrFIBANM5YDHaskbgYHfjnv1hBSo1IttWyVtZlDTnaB6UuimQSrRndNY22iZeCdUB3daiV8cNUzchA5Rv27lEM3stDU2eA2qHWQ1ABBBDkEzWbLR3K5qz3txDh7DUTSHzrCc6enjtQvdSz642os7ya2uHB2i7gkH7K8yITGoamEuaAAtUIskEMwr2dbrZ+dmenE66FJ0lwwaMegdhoPZUpKjRFllQuVV1pVqAQCjlyd1hg61nBwsZ9YcbTRtoZEODNs0kobMIHBJ70o4whCIYxB+MgWSkfLYgdiFIRDpe3YYOl2KwyYrVFaTceRHU4CyPa3Nvhnr3B6XZnkMupcaMC4I021TVzVEt1gXLSg9/M4cE3ufWBXYgBQDlqsRLmBm2MmWhbDB1mjqXKDAEIA99DAAJqrlrRw6vxQfMcdpJ+oF4GByd3a/N609SVu4CoPZd2amX5eOWWXf9pQbOuAKIU4yTCQ9qRw2vRMMuQcsBCpNb4FEN95iNE44xbt5FhhnHWTW0uGLY+/51qq/FnUCIHeJ9FPXuTnmhj3l2cmxOpHLP1wRTplZN1NUnnpvGxXDySkXNmB004ChD9TIBZtsDYQk4BslN9OC7iYMXsSJ/CsuYkiTwXqaKWGPfIt/Lxy3sbnv42zC0N/3vNc/doHfcfy7PYcj9Ee6HjVgOJIvxfgQuphfDxMO42Iklae+r7rdkttr8SG562UWCXfN2KIfjKOO+ncAsJNDWpWmGL0heqP3WfzZJJ8z/Qt5XAbrphjTezDXD66BLkREdblFexdnkFJ8vxPaKInQ6bvr6ShUIrcZNGZ9MVCsqkc0hh5SziDg8Mx7mM7PMI6NMIT7hZB7GB6qzRhxfV2rSH5kP7gsn/kE7e9jsMBHH0xZ0a2+soTQldQL99VznZ9LNUzzHV0irbD8VOltagmPTNU7XMupgES+VIZUR5ELv070UA6nzCekpfhcc7KWJrmcSHL8yqXdqNg3MNRlraTo6PJUSR5xHQwQTTqNFyKMpEcLbXviGsmiI90qE0WMdN8cV8ZsArMCHLmWZbUkwoRRS4qDJ/xKhTosk+2h0axajlRK8pRlrDUxdBQHZYegUpQlYJGVrMJygm5KIsgsLKFQxCTBtlQcG0A4yikNwxjnFEFMiVBORw0KGgoAAAANSUhEUgAAAEEAAABaCAIAAABohKxKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA3USURBVHhe7ZwvdKtIFMYjIyNrKysraysrI2MjIyNjIyMjsZFIZCwSicQikSPZ33dnhkCSdgntvn1vz3I4PDIMM/e7/+cOfbPz+VwURVmWeZ5zw09u/NW3/M5XyGvbdpZlGXee1qujD6AP6Te592QLQ5qm3DVNU9f1n3WFYPRFGE6nU1VV3P2JByYQMPi7P/G4YPgvyOF/DP+mDv5vD/8m9y9z/5dsOvmPxIdBjHN39GTQ5trbLvdeiuMMn+lXbGluprozzidDqznoUnpKrnyrf8euXLpfl6GMigspQ3z9X/Z6r2dvQD9uE3tf0xnZdI9dPdyfYrjize00X0qhg/211QvZFdz+C5GDw7bmOicKGJLkcBPjhiy3yZC655wf9VY9rtuGvbr+XjSX8cJwAdI90iOMKm+LU+sG6tf5pWN1lS8Bty7b6tyW57YiufUju9aPQmPt+eHaOm/LrC1SPfJHU7ZFZn1osflcraEKRlMfU8GyrQsaHY086jSWectUrzN74BiUFBqKMz+6ZK3xewyMcjiBYWjT6aHJjm2etuekTfciqKlFRLpTy/nQ8hTKmsqdNm2RuPNRj5isKR1P8wMtLjs48LumYW76n09tdhBgKMj2PG3yUwP4dGON4K3adEsfl6WOWQDT1m2WuNPWcS1zx1vHDwcxtxjSNIkYgsBdwmv7wNcyddmmbYoGgjwPmCzZQrFIBANM5YDHaskbgYHfjnv1hBSo1IttWyVtZlDTnaB6UuimQSrRndNY22iZeCdUB3daiV8cNUzchA5Rv27lEM3stDU2eA2qHWQ1ABBBDkEzWbLR3K5qz3t&quot;&#xd;
                       }                  &#xd;
                ]                                                        &#xd;
                }&#xd;
            ],                          &#xd;
        &quot;updateAction&quot;: &quot;UPDATE&quot;                                        &#xd;
        }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.contextElementResponses[0].statusCode.details</stringProp>
              <stringProp name="EXPECTED_VALUE">All is OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="false">
              <stringProp name="TestPlan.comments">Switch on to format JSON responses in &quot;View Results Tree&quot;.</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Echantillon Débogage" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">SummaryReport.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="180058665">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="162209123">label=INJ:combined</stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CompositeResultCollector guiclass="kg.apc.jmeter.vizualizers.CompositeGraphGui" testclass="kg.apc.jmeter.vizualizers.CompositeResultCollector" testname="jp@gc - Composite Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="COMPOSITE_CFG">
          <collectionProp name="">
            <stringProp name="1267279877">jp@gc - Transactions per Second</stringProp>
            <stringProp name="1267279877">jp@gc - Transactions per Second</stringProp>
            <stringProp name="245914917">jp@gc - Active Threads Over Time</stringProp>
          </collectionProp>
          <collectionProp name="">
            <stringProp name="117711132">Successful Transactions per Second</stringProp>
            <stringProp name="-1517411905">Failed Transactions per Second</stringProp>
            <stringProp name="2133254370">Overall Active Threads</stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.vizualizers.CompositeResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
